?rbinom()
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("patchwork")
library(tidyverse)
library(ggplot2)
library(patchwork)
simulations = 10000
sample.size = 500
p.true = 0.39
poll.data1 = rbinom(sample.size, simulations, p.true)
poll.data1
poll.data1 = rbinom(simulations, sample.size, p.true)/sample.size
poll.data1
df1 = data.frame(x=poll.data1)
histogram.plot1 = ggplot(data = df1, aes(x=x))+                  # specify data
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0,0.025,0.003)) +
geom_hline(yintercept=0)+                                          # plot x axis
theme_bw()+                                                        # change theme
geom_density(color = "blue") +
xlab("Sample Propportion")+                                           # label x axis
ylab("Density")+                                                   # label y axis
labs(color = "")
histogram.plot1
histogram.plot1 = ggplot(data = df1, aes(x=x))+                  # specify data
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.2,0.5,0.03)) +
geom_hline(yintercept=0)+                                          # plot x axis
theme_bw()+                                                        # change theme
geom_density(color = "blue") +
xlab("Sample Propportion")+                                           # label x axis
ylab("Density")+                                                   # label y axis
labs(color = "")
histogram.plot1
histogram.plot1 = ggplot(data = df1, aes(x=x))+                  # specify data
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.25,0.5,0.03)) +
geom_hline(yintercept=0)+                                          # plot x axis
theme_bw()+                                                        # change theme
geom_density(color = "blue") +
xlab("Sample Propportion")+                                           # label x axis
ylab("Density")+                                                   # label y axis
labs(color = "")
histogram.plot1
histogram.plot1 = ggplot(data = df1, aes(x=x))+                  # specify data
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.25,0.5,0.01)) +
geom_hline(yintercept=0)+                                          # plot x axis
theme_bw()+                                                        # change theme
geom_density(color = "blue") +
xlab("Sample Propportion")+                                           # label x axis
ylab("Density")+                                                   # label y axis
labs(color = "")
histogram.plot1
histogram.plot1 = ggplot(data = df1, aes(x=x))+                  # specify data
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.01)) +
geom_hline(yintercept=0)+                                          # plot x axis
theme_bw()+                                                        # change theme
geom_density(color = "blue") +
xlab("Sample Propportion")+                                           # label x axis
ylab("Density")+                                                   # label y axis
labs(color = "")
histogram.plot1
histogram.plot1 = ggplot(data = df1, aes(x=x))+                  # specify data
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.015)) +
geom_hline(yintercept=0)+                                          # plot x axis
theme_bw()+                                                        # change theme
geom_density(color = "blue") +
xlab("Sample Propportion")+                                           # label x axis
ylab("Density")+                                                   # label y axis
labs(color = "")
histogram.plot1
sample.size = 1000
p.true = 0.39
poll.data1 = rbinom(simulations, sample.size, p.true)/sample.size
df1 = data.frame(x=poll.data1)
histogram.plot1 = ggplot(data = df1, aes(x=x))+                  # specify data
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.015)) +
geom_hline(yintercept=0)+                                          # plot x axis
theme_bw()+                                                        # change theme
geom_density(color = "blue") +
xlab("Sample Propportion")+                                           # label x axis
ylab("Density")+                                                   # label y axis
labs(color = "")
histogram.plot1
sample.size = 500
p.true = 0.39
poll.data1 = rbinom(simulations, sample.size, p.true)/sample.size
df1 = data.frame(x=poll.data1)
histogram.plot1 = ggplot(data = df1, aes(x=x))+                  # specify data
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.015)) +
geom_hline(yintercept=0)+                                          # plot x axis
theme_bw()+                                                        # change theme
geom_density(color = "blue") +
xlab("Sample Propportion")+                                           # label x axis
ylab("Density")+                                                   # label y axis
labs(color = "")
histogram.plot1
q = quantile(poll.data1, c(0.025, 0.975))
q
.434-.348
.086/2
simulations = 10000
sample.size1 = 500
p.true = 0.39
poll.data1 = rbinom(simulations, sample.size1, p.true)/sample.size1
df1 = data.frame(x=poll.data1)
histogram.plot1 = ggplot(data = df1, aes(x=x))+
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.015)) +
geom_hline(yintercept=0)+
theme_bw()+
geom_density(color = "blue") +
xlab("Sample Propportion")+
ylab("Density")+
labs(color = "", title = "Proportion of people satisfied from polls with n = 500")
histogram.plot1
range1 = quantile(poll.data1, c(0.025, 0.975)) #(.348, .434), range = 0.086, MOE = 0.043, approx 4%
sample.size2 = 1000
poll.data2 = rbinom(simulations, sample.size2, p.true)/sample.size2
df2 = data.frame(x=poll.data2)
histogram.plot2 = ggplot(data = df2, aes(x=x))+
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.015)) +
geom_hline(yintercept=0)+
theme_bw()+
geom_density(color = "blue") +
xlab("Sample Propportion")+
ylab("Density")+
labs(color = "", title = "Proportion of people satisfied from polls with n = 1000")
histogram.plot2
range2 = quantile(poll.data2, c(0.025, 0.975)) #(.348, .434), range = 0.086, MOE = 0.043, approx 4%
poll.data2
max(poll.data2)
min(poll.data2)
histogram.plot2 = ggplot(data = df2, aes(x=x))+
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.01)) +
geom_hline(yintercept=0)+
theme_bw()+
geom_density(color = "blue") +
xlab("Sample Propportion")+
ylab("Density")+
labs(color = "", title = "Proportion of people satisfied from polls with n = 1000")
histogram.plot2
histogram.plot1
histogram.plot2
range2 = quantile(poll.data2, c(0.025, 0.975)) #(.348, .434), range = 0.086, MOE = 0.043, approx 4%
range2
.421-.36
.061/2
simulations = 10000
sample.size1 = 1004
p.true = 0.39
poll.data1 = rbinom(simulations, sample.size1, p.true)/sample.size1
df1 = data.frame(x=poll.data1)
histogram.plot1 = ggplot(data = df1, aes(x=x))+
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.015)) +
geom_hline(yintercept=0)+
theme_bw()+
geom_density(color = "blue") +
xlab("Sample Propportion")+
ylab("Density")+
labs(color = "", title = "Proportion of people satisfied from polls with n = 1004")
histogram.plot1
min(poll.data1)
max(poll.data1)
histogram.plot1 = ggplot(data = df1, aes(x=x))+
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.01)) +
geom_hline(yintercept=0)+
theme_bw()+
geom_density(color = "blue") +
xlab("Sample Propportion")+
ylab("Density")+
labs(color = "", title = "Proportion of people satisfied from polls with n = 1004")
histogram.plot1
range1 = quantile(poll.data1, c(0.025, 0.975)) #(.348, .434), range = 0.086, MOE = 0.043, approx 4%
range1
0.4203187-0.3595618
0.0607569/2
sample.size2 = 2008
poll.data2 = rbinom(simulations, sample.size2, p.true)/sample.size2
df2 = data.frame(x=poll.data2)
histogram.plot2 = ggplot(data = df2, aes(x=x))+
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.01)) +
geom_hline(yintercept=0)+
theme_bw()+
geom_density(color = "blue") +
xlab("Sample Propportion")+
ylab("Density")+
labs(color = "", title = "Proportion of people satisfied from polls with n = 2008")
histogram.plot2
range2 = quantile(poll.data2, c(0.025, 0.975)) #(.360, .421), range = 0.061, MOE = 0.0305, approx 3%
range2
0.4113546-0.3685259
0.0428287/2
MOE1 = (range1[2]-range1[1])/2
MOE1
MOE2 = (range2[2]-range2[1])/2
MOE2
n = 1004
yes = round(n*p.true)
og.sample = tibble(id = 1:n,
measurement = c(rep(1, yes), rep(0,n-yes)))
og.sample |>
summarize(mean = mean(measurement))
resample = sample(x = 1:n,
size = n,
replace = T)
resample
og.sample[resample,] |>
summarize(mean = mean(measurement))
og.sample
og.sample[resample,] |>
summarize(mean = mean(measurement))
og.sample
?sample()
n = 1004
yes = round(n*p.true)
og.sample = tibble(id = 1:n,
measurement = c(rep(1, yes), rep(0,n-yes)))
og.sample |>
summarize(mean = mean(measurement))
resamples = numeric(10000)
for(i in 1:10000){
resample = sample(x = 1:,
for(i in 1:10000){
resample = sample(x = 1:n,
size = n,
replace = T)
resamples[i] = mean(resample)
}
resamples
for(i in 1:10000){
resample = sample(x = og.sample$measurement,
size = n,
replace = T)
resamples[i] = mean(resample)
}
resamples
resampling.plot = ggplot(data = resamples, aes(x=x))+
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.01)) +
geom_hline(yintercept=0)+
theme_bw()+
geom_density(color = "blue") +
xlab("Resample Propportion")+
ylab("Density")+
labs(color = "", title = "Resampling proportion of people satisfied with n = 1004")
class(resamples)
resamples = data.frame(x = resamples)
resampling.plot = ggplot(data = resamples, aes(x=x))+
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.01)) +
geom_hline(yintercept=0)+
theme_bw()+
geom_density(color = "blue") +
xlab("Resample Propportion")+
ylab("Density")+
labs(color = "", title = "Resampling proportion of people satisfied with n = 1004")
resampling.plot
resamples = data.frame(x = resamples)
resampling.plot = ggplot(data = resamples, aes(x=x))+
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.005)) +
geom_hline(yintercept=0)+
theme_bw()+
geom_density(color = "blue") +
xlab("Resample Propportion")+
ylab("Density")+
labs(color = "", title = "Resampling proportion of people satisfied with n = 1004")
resampling.plot
resampling.plot = ggplot(data = resamples, aes(x=x))+
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.01)) +
geom_hline(yintercept=0)+
theme_bw()+
geom_density(color = "blue") +
xlab("Resample Propportion")+
ylab("Density")+
labs(color = "", title = "Resampling proportion of people satisfied with n = 1004")
resampling.plot
resampling.range = quantile(resampling, c(0.025, 0.975)) #(0.3685259, 0.4113546), range = 0.0428287
resampling.range = quantile(resamples, c(0.025, 0.975)) #(0.3685259, 0.4113546), range = 0.0428287
resampling.MOE = (resampling.range[2]-resampling.range[1])/2 #MOE = 0.02141435, approx 2%
resampling.range = quantile(resamples, c(0.025, 0.975)) #(0.3685259, 0.4113546), range = 0.0428287
resampling.range = quantile(resamples, c(0.025, 0.975)) #(0.3685259, 0.4113546), range = 0.0428287
class(poll.data1)
resampling.range = quantile(resamples.df, c(0.025, 0.975)) #(0.3685259, 0.4113546), range = 0.0428287
for(i in 1:10000){
resample = sample(x = og.sample$measurement,
size = n,
replace = T)
resamples[i] = mean(resample)
}
resamples.df = data.frame(x = resamples)
resampling.plot = ggplot(data = resamples.df, aes(x=x))+
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.01)) +
geom_hline(yintercept=0)+
theme_bw()+
geom_density(color = "blue") +
xlab("Resample Propportion")+
ylab("Density")+
labs(color = "", title = "Resampling proportion of people satisfied with n = 1004")
resampling.range = quantile(resamples.df, c(0.025, 0.975)) #(0.3685259, 0.4113546), range = 0.0428287
resampling.range = quantile(resamples, c(0.025, 0.975)) #(0.3685259, 0.4113546), range = 0.0428287
#Task 2
n = 1004
yes = round(n*p.true)
og.sample = tibble(id = 1:n,
measurement = c(rep(1, yes), rep(0,n-yes)))
og.sample |>
summarize(mean = mean(measurement))
resamples = numeric(10000)
for(i in 1:10000){
resample = sample(x = og.sample$measurement,
size = n,
replace = T)
resamples[i] = mean(resample)
}
resamples.df = data.frame(x = resamples)
resampling.plot = ggplot(data = resamples.df, aes(x=x))+
geom_histogram(aes(y=after_stat(density)),
breaks=seq(0.3,0.5,0.01)) +
geom_hline(yintercept=0)+
theme_bw()+
geom_density(color = "blue") +
xlab("Resample Propportion")+
ylab("Density")+
labs(color = "", title = "Resampling proportion of people satisfied with n = 1004")
resampling.range = quantile(resamples, c(0.025, 0.975)) #(0.3685259, 0.4113546), range = 0.0428287
resampling.MOE = (resampling.range[2]-resampling.range[1])/2 #MOE = 0.02141435, approx 2%
resampling.range
0.4213147-0.3595618
resampling.MOE
#Task 3: Simulation over n and p
simulations = 10000
n.vec = seq(100, 3000, by = 10)
p.vec = seq(.01, .99, by = .01)
matrix = expand.grid(n = n.vec, p = p.vec)
dim(matrix)
matrix
28809 *2
n.vec = seq(100, 3000, by = 10)
p.vec = seq(.01, .99, by = .01)
matrix = expand.grid(n = n.vec, p = p.vec)
dim(matrix)
MOE.vec = numeric(57618)
for(i in 1:nrow(matrix)){
for(j in 1:ncol(matrix)){
n.val = n.vec[i]
p.val = p.vec[j]
data = rbinom(simulations, n.val, p.val)
range = quantile(data, c(0.025,0.975))
MOE = (range[2]-range[1])/2
MOE.vec=MOE.vec.append(MOE)
}
}
MOE.vec = numeric(57618)
for(i in 1:nrow(matrix)){
for(j in 1:ncol(matrix)){
n.val = n.vec[i]
p.val = p.vec[j]
data = rbinom(simulations, n.val, p.val)
range = quantile(data, c(0.025,0.975))
MOE = (range[2]-range[1])/2
MOE.vec= append(MOE.vec, MOE)
}
}
for(i in 1:nrow(matrix)){
for(j in 1:ncol(matrix)){
n.val = n.vec[i]
p.val = p.vec[j]
data = rbinom(simulations, n.val, p.val)/n.val
range = quantile(data, c(0.025,0.975))
MOE = (range[2]-range[1])/2
MOE.vec= append(MOE.vec, MOE)
}
}
data
nrow(matrix)
ncol(matrix)
MOE.vec = numeric(57618)
for(i in 1:nrow(matrix)){
for(j in 1:ncol(matrix)){
print(i)
n.val = n.vec[i]
p.val = p.vec[j]
data = rbinom(simulations, n.val, p.val)/n.val
range = quantile(data, c(0.025,0.975))
MOE = (range[2]-range[1])/2
MOE.vec= append(MOE.vec, MOE)
}
}
for(i in 1:length(n.vec)){
for(j in 1:length(p.vec)){
n.val = n.vec[i]
p.val = p.vec[j]
data = rbinom(simulations, n.val, p.val)/n.val
range = quantile(data, c(0.025,0.975))
MOE = (range[2]-range[1])/2
MOE.vec= append(MOE.vec, MOE)
}
}
data
MOE.vec
length(n.vec)
length(p.vec)
p.vec
n.vec
